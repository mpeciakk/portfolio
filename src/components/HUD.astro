---
/* eslint-disable @typescript-eslint/no-unsafe-return */
import "../styles/globals.css";
import { planets } from "@/constants/planets.ts";
---

<div class="fixed top-0 right-0 w-full h-screen flex justify-end gap-8">
  {
    planets.map((planet) => (
      <div
        class="bg-black/30 h-fit mt-auto backdrop-blur-sm border border-blue-400/30 shadow-[0_0_30px_rgba(59,130,246,0.4)] text-blue-300 p-4 space-y-2 mb-8 hidden"
        id={`info-${planet.name}`}
      >
        <div>
          Planet: <span>{planet.name}</span> <br />
        </div>
        <div>{planet.description}</div>
        <div>üõ†Ô∏è {planet.techStack.join(", ")}</div>
      </div>
    ))
  }

  <div
    class="flex justify-between flex-col top-0 right-0 w-64 h-full bg-black/30 backdrop-blur-sm border border-blue-400/30 shadow-[0_0_30px_rgba(59,130,246,0.4)]"
  >
    <div class="absolute inset-0 scanlines opacity-20 pointer-events-none">
    </div>

    <div class="p-4 space-y-4">
      {
        planets.map((planet) => (
          <button
            class="group relative p-4 w-56 rounded-lg bg-blue-900/10 border border-blue-400/30 hover:border-blue-400/60 transition-all duration-300 hover:shadow-[0_0_20px_rgba(59,130,246,0.6)] holographic-card"
            data-planet-id={planet.name}
            style={`transform: translateY(12px);`}
          >
            <div class="absolute inset-0 bg-gradient-to-br from-blue-400/10 via-transparent to-blue-400/10 rounded-lg pointer-events-none" />
            <div class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(59,130,246,0.1),transparent_70%)] rounded-lg pointer-events-none" />

            <span class="relative text-blue-300 font-mono text-lg tracking-wider group-hover:text-blue-200 transition-colors duration-300 text-glow pointer-events-none">
              {planet.name}
            </span>

            <div class="absolute top-2 right-2 w-2 h-2 rounded-full bg-blue-400/50 group-hover:bg-blue-400 group-hover:shadow-[0_0_15px_rgba(59,130,246,0.9)] transition-all duration-300 pulse-dot pointer-events-none" />
          </button>
        ))
      }
    </div>

    <div
      class="h-12 bg-gradient-to-t from-blue-900/40 to-transparent border-t border-blue-400/20"
    >
      <div class="flex items-center justify-between px-4 h-full">
        <span
          class="text-blue-300/90 font-mono text-sm tracking-wider text-glow"
          >SYSTEM STATUS: <span class="text-green-400">ONLINE</span></span
        >
      </div>
    </div>
  </div>
</div>

<style>
  .scanlines {
    background: repeating-linear-gradient(
      0deg,
      rgba(0, 0, 0, 0.15) 0px,
      rgba(0, 0, 0, 0.15) 1px,
      transparent 1px,
      transparent 2px
    );
  }

  .grid-lines {
    background-image:
      linear-gradient(to right, rgba(59, 130, 246, 0.1) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(59, 130, 246, 0.1) 1px, transparent 1px);
    background-size: 20px 20px;
  }

  .text-glow {
    text-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
  }

  .glow-corner {
    box-shadow: 0 0 10px rgba(59, 130, 246, 0.3);
  }

  @keyframes pulse-dot {
    0% {
      opacity: 0.3;
      transform: scale(1);
    }
    50% {
      opacity: 1;
      transform: scale(1.2);
    }
    100% {
      opacity: 0.3;
      transform: scale(1);
    }
  }

  .pulse-dot {
    animation: pulse-dot 2s infinite;
  }

  .holographic-card {
    position: relative;
    overflow: hidden;
  }

  .holographic-card::before {
    content: "";
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      45deg,
      transparent 0%,
      rgba(59, 130, 246, 0.1) 50%,
      transparent 100%
    );
    transform: rotate(45deg);
    animation: holographic-sweep 3s linear infinite;
  }

  @keyframes holographic-sweep {
    0% {
      transform: translateX(-100%) rotate(45deg);
    }
    100% {
      transform: translateX(100%) rotate(45deg);
    }
  }

  .holographic-card:hover {
    transform: translateX(-10px) !important;
    z-index: 100 !important;
  }
</style>
